USE GRAPH ldbc_snb
SET syntax_version="v2"
SET query_timeout=60000

DROP QUERY RecommendMessage

CREATE QUERY RecommendMessage (String fn, String ln) FOR GRAPH ldbc_snb {

  SumAccum<int> @MsgInCommon = 0;
  SumAccum<int> @MsgCnt = 0 ;
  SumAccum<int> @@InputPersonMsgCnt = 0;
  SumAccum<float> @SimilarityScore;
  SumAccum<float> @Rank;
  SumAccum<float> @TagCnt = 0;
  OrAccum @Liked = false;
  float sqrtOfInputPersonMsgCnt;

  Seed = {Person.*};

   #mark messages liked by input user
    InputPerson =
       SELECT s
       FROM Seed:s-((Person_LIKES_Comment>|Person_LIKES_Post>))-:msg
       WHERE s.firstName == fn AND s.lastName == ln
       ACCUM msg.@Liked = true, @@InputPersonMsgCnt += 1;

    sqrtOfInputPersonMsgCnt = sqrt(@@InputPersonMsgCnt);

   #find common msg between input user and other persons
    Others   =
       SELECT p
       FROM InputPerson:s-((Person_LIKES_Comment>|Person_LIKES_Post>))-:msg
                        -((<Person_LIKES_Comment|<Person_LIKES_Post))-:p
       ACCUM p.@MsgInCommon += 1;

    #calculate cosine similarity score.
    #|AxB|/(sqrt(Sum(A_i^2)) * sqrt(Sum(B_i^2)))
    Others  =
        SELECT o
        FROM Others:o-((Person_LIKES_Comment>|Person_LIKES_Post>))-:msg
        ACCUM o.@MsgCnt += 1
        POST-ACCUM o.@SimilarityScore = o.@MsgInCommon/(sqrtOfInputPersonMsgCnt * sqrt(o.@MsgCnt));

   #recommend new messages to input user that have not liked by him.
    RecommendedMessage =
             SELECT msg
             FROM Others:o-((Person_LIKES_Comment>|Person_LIKES_Post>)) - :msg
             WHERE  msg.@Liked == false
             ACCUM msg.@Rank +=o.@SimilarityScore
             ORDER BY msg.@Rank DESC
             LIMIT 10;

  PRINT   RecommendedMessage[RecommendedMessage.content, RecommendedMessage.@Rank];
}

INTERPRET query RecommendMessage("Viktor", "Akhiezer")
