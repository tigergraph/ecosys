//graph schema is on page 19 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf
//BI 8 query description is on page 96 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf
CREATE OR REPLACE DISTRIBUTED QUERY bi8(STRING tag, DATETIME startDate, DATETIME endDate) SYNTAX v3 {
  TYPEDEF TUPLE <UINT personId, UINT score, UINT friendsScore, UINT totalScore> RESULT;
  HeapAccum<RESULT>(100, totalScore DESC, personId ASC) @@result;
  SumAccum<UINT> @score;
  SumAccum<UINT> @friendsScore;
  INT startEpoch = datetime_to_epoch(startDate) * 1000;
  INT endEpoch = datetime_to_epoch(endDate) * 1000;

  tagWithName = SELECT t FROM (t:Tag {name:tag});

  personsWithInterest =
    SELECT p FROM (:tagWithName) <-[:HAS_INTEREST]- (p:Person)
      ACCUM p.@score += 100;

  personsWithMessages =
    SELECT p
      FROM (:tagWithName) <-[:HAS_TAG]- (m:Comment:Post) -[:HAS_CREATOR]-> (p:Person)
     WHERE m.creationDate BETWEEN startEpoch AND endEpoch
     ACCUM p.@score += 1;

  personsWithScore = personsWithInterest UNION personsWithMessages;

  tmp = SELECT p FROM (p:personsWithScore) -[:KNOWS]- (f:Person)
      ACCUM p.@friendsScore += f.@score;

  personsWithScore = SELECT p FROM (p:personsWithScore)
      ACCUM @@result += RESULT(p.id, p.@score, p.@friendsScore, p.@score + p.@friendsScore);

  PRINT @@result as result;
}
