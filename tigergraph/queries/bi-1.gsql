# datetime is a reserved keyword so we use date here.
CREATE OR REPLACE DISTRIBUTED QUERY bi1(DATETIME date) SYNTAX v2 {

  TYPEDEF TUPLE <INT year, BOOL isComment, INT lengthCategory, INT messageCount,
    FLOAT averageMessageLength, INT sumMessageLength, FLOAT percentageOfMessages> RESULT;

  HeapAccum<RESULT>(0, year DESC, isComment ASC, lengthCategory ASC) @@result;
  GroupByAccum<INT year, BOOL isComment, INT lengthCategory,
    SumAccum<INT> messageCount, SumAccum<INT> sumMessageLength> @@midResult;

  OrAccum @isComment;
  SumAccum<INT> @lengthCategory;

  UINT total;
  INT epoch = datetime_to_epoch(date) * 1000;
  messages = SELECT m FROM (Comment1|Comment2|Comment3|Post1|Post2|Post3):m WHERE m.creationDate < epoch;
  total = messages.size();
  messages =
    SELECT m
    FROM messages:m
    WHERE m.length>0
    ACCUM
      m.@isComment = (m.type == "Comment1") OR (m.type == "Comment2") OR (m.type == "Comment3"),
      IF m.length < 40 THEN
        m.@lengthCategory = 0
      ELSE IF m.length < 80 THEN
        m.@lengthCategory = 1
      ELSE IF m.length < 160 THEN
        m.@lengthCategory = 2
      ELSE
        m.@lengthCategory = 3
      END
    POST-ACCUM @@midResult += (year(epoch_to_datetime(m.creationDate/1000)), m.@isComment, m.@lengthCategory -> 1, m.length);

  @@result.resize(@@midResult.size());
  FOREACH m IN @@midResult DO
    @@result += RESULT(m.year, m.isComment, m.lengthCategory, m.messageCount,
      (m.sumMessageLength * 1.0 / m.messageCount), m.sumMessageLength, (m.messageCount * 1.0 / total));
  END;

  PRINT @@result as result;
}
